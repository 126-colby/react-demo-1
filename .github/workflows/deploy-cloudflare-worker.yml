name: Deploy Cloudflare Worker

on:
  push:
    branches:
      - main  # Adjust if your default branch is different
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # recommended LTS version
          cache: 'pnpm' # Enable Node modules caching

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Type check and build project
        run: pnpm run typecheck && pnpm run build
        
      - name: Install Wrangler
        run: pnpm add -g wrangler@latest

      - name: Set Wrangler Secrets
        run: |
          pnpm exec wrangler secret put HASSIO_URL --name react-demo-1 << EOF
          ${{ secrets.HASSIO_URL }}
          EOF
          pnpm exec wrangler secret put HASSIO_TOKEN --name react-demo-1 << EOF
          ${{ secrets.HASSIO_TOKEN }}
          EOF
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Publish Worker to Cloudflare
        run: pnpm exec wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
